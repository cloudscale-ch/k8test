#!/usr/bin/env python3
""" Returns a set of associated releases for a Kubernetes release.

RATIONALE

When we're installing Kubernetes major release, we need to install
associated packages, add a service definitions, install a container runtime,
and provide CNI network plugin.

All these pieces come with separate releases, which change over time. This
script tries to automatically get the most appropriate release for each and
output the result in an easily consumable JSON.

This has the potential to return a different set of releases each time.
If reproducibility is desired, the output should be stored.\n

EXAMPLES

Shows the release set for the latest Kubernetes release:

    release-set

Kubernetes releases can be referenced by index as well, with 0 refering to the
latest minor release, -1 to the previous, and so on.

For example, if 1.28.4 is the latest:

    release-set --kubernetes=0   # 1.28.4
    release-set --kubernetes=-1  # 1.27.8
    release-set --kubernetes=-2  # 1.26.11

Shows the release set for the latest Kubernetes 1.27.x patch:

    release-set --kubernetes=1.27

Shows the release set for the given Kubernetes patch release:

    release-set --kubernetes=1.27.1

"""
from __future__ import annotations

import json
import subprocess
import sys

from semver import Version
from pydantic import BaseModel
from requests import Session
from typer import Option
from typer import Typer
from typing import Iterator
from typing import Optional
from typing import List


cli = Typer(add_completion=False)
session = Session()


# Exclude certain releases that are known to give trouble, and maps them
# to the closest release that fixes it.
RELEASE_MAP = {
    'cilium': {
        # The cilium pods crash-loop in 1.14.4 and 1.14.5
        '1.14.4': '1.14.3',
        '1.14.5': '1.14.3',
    }
}


class Release(BaseModel):

    # The name of the software package
    name: str

    # The version that should be used
    version: str


def repository_versions(url: str, prereleases: bool = False) -> List[Version]:
    """ Extracts versions from the given repository, sorted from oldest to
    newest.

    This requires the `git` client to work.

    """
    process = subprocess.run(
        ('git', 'ls-remote', '--tags', url),
        stdout=subprocess.PIPE,
        check=True
    )

    releases: List[Version] = []

    for line in process.stdout.decode('utf-8').splitlines():
        tag = line.split('refs/tags/', 1)[-1].strip('v')

        # Skip peeled references
        if tag.endswith('{}'):
            continue

        try:
            version = Version.parse(tag)
        except ValueError:
            continue

        if not prereleases and version.prerelease:
            continue

        releases.append(version)

    releases.sort()

    return releases


def match_release(selector: str, releases: List[Version]) -> Optional[Version]:
    """ Matches a release from the given selector. """

    if not releases:
        return None

    if not selector or selector in ('latest', '0'):
        return releases[-1]

    major: int = 1
    minor: Optional[int] = None
    patch: Optional[int] = None

    if selector.startswith('-'):
        latest = releases[-1]
        minor = latest.minor - abs(int(selector))
        selector = f"{latest.major}.{minor}"

    if selector.count('.') == 0:
        major = int(selector)
    elif selector.count('.') == 1:
        major, minor = (int(s) for s in selector.split('.'))
    elif selector.count('.') == 2:
        major, minor, patch = (int(s) for s in selector.split('.'))
    else:
        return None

    for release in reversed(releases):
        if major != release.major:
            continue
        if minor is not None and minor != release.minor:
            continue
        if patch is not None and patch != release.patch:
            continue

        return release

    return None


def k8s_binary(name: str, kubernetes: Version) -> Release:
    """ Binaries like kubeadm/kubectl/kubelet are part of the Kubernetes
    release and are versioned accordingly.

    """

    return Release(
        name=name,
        version=str(kubernetes),
    )


def cni_plugins(kubernetes: Version) -> Release:
    """ Get the latest CNI plugins (they seem to be compatible with older
    releases).

    """

    repo = "https://github.com/containernetworking/plugins"
    version = repository_versions(repo)[-1]

    return Release(
        name="cni-plugins",
        version=str(version),
    )


def cri_tools(kubernetes: Version) -> Release:
    """ The cri-tools for the given Kubernetes release, which uses the same
    minor version as Kubernetes (but not the same patch release).

    """

    repo = "https://github.com/kubernetes-sigs/cri-tools"
    version = match_release(
        f"{kubernetes.major}.{kubernetes.minor}",
        repository_versions(repo)

    )
    assert version

    return Release(
        name="cri-tools",
        version=str(version),
    )


def containerd(kubernetes: Version) -> Release:
    """ Containerd releases independently of Kubernetes and it is generally
    okay tu just use the latest release.

    """

    versions = repository_versions("https://github.com/containerd/containerd")

    return Release(
        name="containerd",
        version=str(versions[-1]),
    )


def runc(kubernetes: Version) -> Release:
    """ Runc releases independently of Kubernetes and it is generally
    okay tu just use the latest release.

    """

    versions = repository_versions("https://github.com/opencontainers/runc")

    return Release(
        name="runc",
        version=str(versions[-1]),
    )


def buildkit(kubernetes: Version) -> Release:
    """ Buildkit is used by nerdctl. """

    versions = repository_versions("https://github.com/moby/buildkit")

    return Release(
        name="buildkit",
        version=str(versions[-1]),
    )


def nerdctl(kubernetes: Version) -> Release:
    """ Nerdctl is a CLI tool to implement docker commands with containerd.

    """

    versions = repository_versions("https://github.com/containerd/nerdctl")

    return Release(
        name="nerdctl",
        version=str(versions[-1]),
    )


def cilium(kubernetes: Version) -> Release:
    """ The latest stable cilium release (there seems to be no way of matching
    this to a specific Kubernetes release).

    """

    response = session.get(
        'https://raw.githubusercontent.com/cilium/cilium/main/stable.txt'
    )
    response.raise_for_status()

    return Release(
        name="cilium",
        version=response.text.strip('v \n'),
    )


def cilium_cli(kubernetes: Version) -> Release:
    """ The latest stable cilium-cli release. """

    response = session.get(
        'https://raw.githubusercontent.com/cilium/cilium-cli/main/stable.txt'
    )
    response.raise_for_status()

    version = response.text.strip('v \n')
    return Release(
        name="cilium-cli",
        version=version,
    )


def helm(kubernetes: Version) -> Release:
    """ Returns the helm version that should be installed. """

    repo = "https://github.com/helm/helm"

    # Limit to 3.x for now, with the assumption that 4.x would break things
    version = match_release("3", repository_versions(repo))

    assert version

    return Release(
        name="helm",
        version=str(version),
    )


def k9s(kubernetes: Version) -> Release:
    """ Returns the k9s version that should be installed. """

    repo = "https://github.com/derailed/k9s"
    version = repository_versions(repo)[-1]

    return Release(
        name="k9s",
        version=str(version),
    )


@cli.command(help=__doc__.strip())
def main(
    kubernetes: str = Option('', help="Kubernetes release selector."),
    limit: List[str] = Option([], help="Limit to these projects"),
) -> None:
    kubernetes_release = match_release(
        selector=kubernetes,
        releases=repository_versions(
            'https://github.com/kubernetes/kubernetes'
        )
    )

    if not kubernetes_release:
        print(f"'{kubernetes}' did not match any Kubernetes release")
        sys.exit(1)

    def release_set() -> Iterator[Release]:
        if not limit or 'kubernetes' in limit:
            yield Release(name='kubernetes', version=str(kubernetes_release))

        if not limit or 'kubeadm' in limit:
            yield k8s_binary('kubeadm', kubernetes_release)

        if not limit or 'kubelet' in limit:
            yield k8s_binary('kubelet', kubernetes_release)

        if not limit or 'kubectl' in limit:
            yield k8s_binary('kubectl', kubernetes_release)

        if not limit or 'cni-plugins' in limit:
            yield cni_plugins(kubernetes_release)

        if not limit or 'cri-tools' in limit:
            yield cri_tools(kubernetes_release)

        if not limit or 'containerd' in limit:
            yield containerd(kubernetes_release)

        if not limit or 'runc' in limit:
            yield runc(kubernetes_release)

        if not limit or 'buildkit' in limit:
            yield buildkit(kubernetes_release)

        if not limit or 'nerdctl' in limit:
            yield nerdctl(kubernetes_release)

        if not limit or 'cilium' in limit:
            yield cilium(kubernetes_release)

        if not limit or 'cilium-cli' in limit:
            yield cilium_cli(kubernetes_release)

        if not limit or 'helm' in limit:
            yield helm(kubernetes_release)

        if not limit or 'k9s' in limit:
            yield k9s(kubernetes_release)

    releases = tuple(release_set())

    for release in releases:
        if release.name not in RELEASE_MAP:
            continue

        if release.version not in RELEASE_MAP[release.name]:
            continue

        release.version = RELEASE_MAP[release.name][release.version]

    print(json.dumps({r.name: r.model_dump() for r in releases}, indent=4))


if __name__ == '__main__':
    cli()
